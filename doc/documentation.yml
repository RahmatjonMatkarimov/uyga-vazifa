openapi: 3.0.3
info:
  title: Authentication, Audio Book, Author, Book, Citation, and eBook API
  description: API for user authentication, managing audio books, authors, books, citations, and eBooks, including user registration, verification, login, logout, password reset, refresh token generation, audio book CRUD operations, author CRUD operations with search, book CRUD operations with search, citation CRUD operations, and eBook CRUD operations.
  version: 1.0.0
servers:
  - url: http://localhost:3000/
    description: Local development server
paths:
  /register:
    post:
      summary: Register a new user
      description: Creates a new user account with username, email, and password, and sends an OTP for verification.
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: john_doe
                email:
                  type: string
                  format: email
                  example: john@example.com
                password:
                  type: string
                  format: password
                  example: Password123!
              required:
                - username
                - email
                - password
      responses:
        '201':
          description: User registered successfully, OTP sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: registered
        '400':
          description: User already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: bu foydalanuvchi allaqachon mavjud
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /verify:
    post:
      summary: Verify user OTP
      description: Verifies the OTP sent to the user's email to complete registration.
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: john@example.com
                otp:
                  type: string
                  example: "123456"
              required:
                - email
                - otp
      responses:
        '201':
          description: OTP verified successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: verify
        '400':
          description: OTP expired or wrong OTP
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: otp expired
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: user not found
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /login:
    post:
      summary: User login
      description: Authenticates a user with email and password, returns access and refresh tokens.
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: john@example.com
                password:
                  type: string
                  format: password
                  example: Password123!
              required:
                - email
                - password
      responses:
        '201':
          description: Login successful, tokens issued
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: seccess
                  acces:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                required:
                  - message
                  - acces
          headers:
            Set-Cookie:
              schema:
                type: string
                example: AccessToken=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...; HttpOnly; Max-Age=900000; RefreshToken=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...; HttpOnly; Max-Age=604800000
        '400':
          description: Wrong password
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: wrong password
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: user not found
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /refreshToken:
    post:
      summary: Refresh access token
      description: Generates a new access token using a refresh token stored in a cookie. Sets a new AccessToken cookie with a 15-minute expiration.
      tags:
        - Authentication
      security:
        - cookieAuthRefresh: []
      responses:
        '201':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: token refreshed
          headers:
            Set-Cookie:
              schema:
                type: string
                example: AccessToken=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...; HttpOnly; Max-Age=900000
        '400':
          description: Refresh token not found or invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: token not found
        '401':
          description: Invalid or expired refresh token
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: invalid refresh token
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /logout:
    get:
      summary: Log out user
      description: Clears access and refresh token cookies to log out the user.
      tags:
        - Authentication
      security:
        - cookieAuth: []
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: logout successful
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /forgotPasswordVerify:
    post:
      summary: Request password reset
      description: Sends an OTP to the user's email for password reset verification.
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: john@example.com
              required:
                - email
      responses:
        '201':
          description: OTP sent for password reset
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: verify
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: user not found
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /resetPassword:
    post:
      summary: Reset user password
      description: Resets the user's password after verifying the OTP.
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: john@example.com
                password:
                  type: string
                  format: password
                  example: NewPassword123!
                otp:
                  type: string
                  example: "123456"
              required:
                - email
                - password
                - otp
      responses:
        '201':
          description: Password reset successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: password reset
        '400':
          description: OTP expired or wrong OTP
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: otp expired
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: user not found
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /aBook/{id}:
    get:
      summary: Get audio book by book ID
      description: Retrieves audio book details associated with a specific book ID.
      tags:
        - Audio Books
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            example: 507f1f77bcf86cd799439011
          description: The ID of the book
      responses:
        '200':
          description: Audio book retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  foundedAutor:
                    type: array
                    items:
                      $ref: '#/components/schemas/AudioBook'
        '404':
          description: Audio book not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: mavjud emas
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete audio book
      description: Deletes an audio book by its ID. Requires admin or superAdmin role.
      tags:
        - Audio Books
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            example: 507f1f77bcf86cd799439011
          description: The ID of the audio book
      responses:
        '201':
          description: Audio book deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: bajarildi
        '400':
          description: Unauthorized access (not admin or superAdmin)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: you are not admin and superAdmin
        '404':
          description: Audio book not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: mavjud emas
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /aBook:
    post:
      summary: Upload audio book
      description: Creates a new audio book entry with book ID, author ID, and audio file. Requires admin or superAdmin role.
      tags:
        - Audio Books
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                book_id:
                  type: string
                  example: 507f1f77bcf86cd799439011
                author_id:
                  type: string
                  example: 507f1f77bcf86cd799439012
                audio_url:
                  type: string
                  format: binary
                  description: Audio file to upload
              required:
                - book_id
                - author_id
                - audio_url
      responses:
        '201':
          description: Audio book uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: bajarildi
        '400':
          description: Validation error or unauthorized access
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Validation failed
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /author:
    get:
      summary: Get all authors
      description: Retrieves a list of all authors with their associated books.
      tags:
        - Authors
      responses:
        '200':
          description: Authors retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  authors:
                    type: array
                    items:
                      $ref: '#/components/schemas/Author'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a new author
      description: Creates a new author with provided details and an image file. Requires admin or superAdmin role.
      tags:
        - Authors
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                fullneme:
                  type: string
                  example: Alisher Navoi
                bith_date:
                  type: number
                  example: 1441
                death_date:
                  type: string
                  example: "1501"
                periot:
                  type: string
                  enum: ["Temuriylar davri", "Jadid adabiyoti", "Savet davri", "Mustaqillik davri"]
                  example: Temuriylar davri
                bio:
                  type: string
                  example: A prominent Uzbek poet and statesman.
                creativite:
                  type: string
                  example: Poetry, prose, and historical writings
                region:
                  type: string
                  example: Herat
                img:
                  type: string
                  format: binary
                  description: Author image file
                books:
                  type: string
                  example: 507f1f77bcf86cd799439011
              required:
                - fullneme
                - bith_date
                - death_date
                - periot
                - bio
                - creativite
                - region
                - img
                - books
      responses:
        '201':
          description: Author created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: bajarildi
        '400':
          description: Validation error or unauthorized access
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Validation failed
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /author/{id}:
    get:
      summary: Get author by ID
      description: Retrieves details of a specific author by ID, including associated books.
      tags:
        - Authors
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            example: 507f1f77bcf86cd799439011
          description: The ID of the author
      responses:
        '200':
          description: Author retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  foundedAutor:
                    $ref: '#/components/schemas/Author'
        '404':
          description: Author not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: mavjud emas
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update author
      description: Updates an existing author's details and image. Requires admin or superAdmin role.
      tags:
        - Authors
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            example: 507f1f77bcf86cd799439011
          description: The ID of the author
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                fullneme:
                  type: string
                  example: Alisher Navoi
                bith_date:
                  type: number
                  example: 1441
                death_date:
                  type: string
                  example: "1501"
                periot:
                  type: string
                  enum: ["Temuriylar davri", "Jadid adabiyoti", "Savet davri", "Mustaqillik davri"]
                  example: Temuriylar davri
                bio:
                  type: string
                  example: A prominent Uzbek poet and statesman.
                creativite:
                  type: string
                  example: Poetry, prose, and historical writings
                region:
                  type: string
                  example: Herat
                img:
                  type: string
                  format: binary
                  description: Author image file
                books:
                  type: string
                  example: 507f1f77bcf86cd799439011
              required:
                - fullneme
                - bith_date
                - death_date
                - periot
                - bio
                - creativite
                - region
                - img
                - books
      responses:
        '201':
          description: Author updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: bajarildi
        '400':
          description: Validation error or unauthorized access
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Validation failed
        '404':
          description: Author not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: mavjud emas
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete author
      description: Deletes an author by ID. Requires admin or superAdmin role.
      tags:
        - Authors
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            example: 507f1f77bcf86cd799439011
          description: The ID of the author
      responses:
        '201':
          description: Author deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: bajarildi
        '400':
          description: Unauthorized access (not admin or superAdmin)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: you are not admin and superAdmin
        '404':
          description: Author not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: mavjud emas
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /search:
    get:
      summary: Search authors by name
      description: Searches for authors by their full name using a case-insensitive regex query.
      tags:
        - Authors
      parameters:
        - in: query
          name: name
          required: true
          schema:
            type: string
            example: Alisher
          description: The name or partial name of the author to search for
      responses:
        '200':
          description: Authors matching the search query
          content:
            application/json:
              schema:
                type: object
                properties:
                  authors:
                    type: array
                    items:
                      $ref: '#/components/schemas/Author'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /book:
    get:
      summary: Get all books
      description: Retrieves a list of all books with their associated author information and citations.
      tags:
        - Books
      responses:
        '200':
          description: Books retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  books:
                    type: array
                    items:
                      $ref: '#/components/schemas/Book'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a new book
      description: Creates a new book with provided details and an image file. Requires admin or superAdmin role.
      tags:
        - Books
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: Xamsa
                periot:
                  type: string
                  enum: ["Temuriylar davri", "Jadid adabiyoti", "Savet davri", "Mustaqillik davri"]
                  example: Temuriylar davri
                desc:
                  type: string
                  example: A collection of five epic poems.
                page:
                  type: number
                  example: 300
                published_year:
                  type: string
                  example: "1483"
                ganre:
                  type: string
                  example: Poetry
                published_home:
                  type: string
                  example: Herat Publishing
                img:
                  type: string
                  format: binary
                  description: Book cover image file
                author_info:
                  type: string
                  example: 507f1f77bcf86cd799439011
                Citaions:
                  type: string
                  example: 507f1f77bcf86cd799439012
              required:
                - title
                - periot
                - desc
                - page
                - published_year
                - ganre
                - published_home
                - img
                - author_info
                - Citaions
      responses:
        '201':
          description: Book created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: bajarildi
        '400':
          description: Validation error or unauthorized access
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Validation failed
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /book/{id}:
    get:
      summary: Get book by ID
      description: Retrieves details of a specific book by ID, including associated author information and citations.
      tags:
        - Books
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            example: 507f1f77bcf86cd799439011
          description: The ID of the book
      responses:
        '200':
          description: Book retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  foundedBook:
                    $ref: '#/components/schemas/Book'
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: mavjud emas
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update book
      description: Updates an existing book's details and image. Requires admin or superAdmin role.
      tags:
        - Books
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            example: 507f1f77bcf86cd799439011
          description: The ID of the book
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: Xamsa
                periot:
                  type: string
                  enum: ["Temuriylar davri", "Jadid adabiyoti", "Savet davri", "Mustaqillik davri"]
                  example: Temuriylar davri
                desc:
                  type: string
                  example: A collection of five epic poems.
                page:
                  type: number
                  example: 300
                published_year:
                  type: string
                  example: "1483"
                ganre:
                  type: string
                  example: Poetry
                published_home:
                  type: string
                  example: Herat Publishing
                img:
                  type: string
                  format: binary
                  description: Book cover image file
                author_info:
                  type: string
                  example: 507f1f77bcf86cd799439011
                Citaions:
                  type: string
                  example: 507f1f77bcf86cd799439012
              required:
                - title
                - periot
                - desc
                - page
                - published_year
                - ganre
                - published_home
                - img
                - author_info
                - Citaions
      responses:
        '201':
          description: Book updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: bajarildi
        '400':
          description: Validation error or unauthorized access
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Validation failed
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: mavjud emas
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete book
      description: Deletes a book by ID. Requires admin or superAdmin role.
      tags:
        - Books
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            example: 507f1f77bcf86cd799439011
          description: The ID of the book
      responses:
        '201':
          description: Book deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: bajarildi
        '400':
          description: Unauthorized access (not admin or superAdmin)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: you are not admin and superAdmin
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: mavjud emas
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /search_book:
    get:
      summary: Search books by author name
      description: Searches for authors by their full name using a case-insensitive regex query (intended to search books, but currently searches authors).
      tags:
        - Books
      parameters:
        - in: query
          name: name
          required: true
          schema:
            type: string
            example: Alisher
          description: The name or partial name of the author to search for
      responses:
        '200':
          description: Authors matching the search query
          content:
            application/json:
              schema:
                type: object
                properties:
                  authors:
                    type: array
                    items:
                      $ref: '#/components/schemas/Author'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /Citation:
    get:
      summary: Get all citations
      description: Retrieves a list of all citations with their associated author information.
      tags:
        - Citations
      responses:
        '200':
          description: Citations retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  Citations:
                    type: array
                    items:
                      $ref: '#/components/schemas/Citation'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a new citation
      description: Creates a new citation with provided book ID and description.
      tags:
        - Citations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                book_id:
                  type: string
                  example: 507f1f77bcf86cd799439011
                desc:
                  type: string
                  example: A notable quote from the book.
              required:
                - book_id
                - desc
      responses:
        '201':
          description: Citation created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: bajarildi
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Validation failed
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /Citation/{id}:
    put:
      summary: Update citation
      description: Updates an existing citation's details.
      tags:
        - Citations
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            example: 507f1f77bcf86cd799439011
          description: The ID of the citation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                book_id:
                  type: string
                  example: 507f1f77bcf86cd799439011
                desc:
                  type: string
                  example: An updated notable quote from the book.
              required:
                - book_id
                - desc
      responses:
        '201':
          description: Citation updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: bajarildi
        '404':
          description: Citation not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: mavjud emas
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete citation
      description: Deletes a citation by ID.
      tags:
        - Citations
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            example: 507f1f77bcf86cd799439011
          description: The ID of the citation
      responses:
        '201':
          description: Citation deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: bajarildi
        '404':
          description: Citation not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: mavjud emas
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /eBook/{id}:
    get:
      summary: Get eBook by book ID
      description: Retrieves eBook details associated with a specific book ID.
      tags:
        - eBooks
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            example: 507f1f77bcf86cd799439011
          description: The ID of the book
      responses:
        '200':
          description: eBook retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  foundedAutor:
                    type: array
                    items:
                      $ref: '#/components/schemas/EBook'
        '404':
          description: eBook not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: mavjud emas
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete eBook
      description: Deletes an eBook by its ID. Requires admin or superAdmin role.
      tags:
        - eBooks
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            example: 507f1f77bcf86cd799439011
          description: The ID of the eBook
      responses:
        '201':
          description: eBook deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: bajarildi
        '400':
          description: Unauthorized access (not admin or superAdmin)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: you are not admin and superAdmin
        '404':
          description: eBook not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: mavjud emas
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /eBook:
    post:
      summary: Upload eBook
      description: Creates a new eBook entry with book ID, author ID, and eBook file. Requires admin or superAdmin role.
      tags:
        - eBooks
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                book_id:
                  type: string
                  example: 507f1f77bcf86cd799439011
                author_id:
                  type: string
                  example: 507f1f77bcf86cd799439012
                ebook_url:
                  type: string
                  format: binary
                  description: eBook file to upload
              required:
                - book_id
                - author_id
                - ebook_url
      responses:
        '201':
          description: eBook uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: bajarildi
        '400':
          description: Validation error or unauthorized access
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Validation failed
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    Error:
      type: object
      properties:
        message:
          type: string
          example: Internal server error
    User:
      type: object
      properties:
        username:
          type: string
          example: john_doe
        email:
          type: string
          format: email
          example: john@example.com
        password:
          type: string
          format: password
          example: Password123!
        role:
          type: string
          enum: [user, admin, superAdmin]
          example: user
        otp:
          type: string
          example: "123456"
        otpTime:
          type: number
          example: 1697654321000
        isVerified:
          type: boolean
          example: false
      required:
        - username
        - email
        - password
        - role
        - otp
        - otpTime
    AudioBook:
      type: object
      properties:
        _id:
          type: string
          example: 507f1f77bcf86cd799439011
        author_id:
          type: string
          example: 507f1f77bcf86cd799439012
        book_id:
          type: string
          example: 507f1f77bcf86cd799439013
        audio_url:
          type: string
          example: audio_1697654321000.mp3
      required:
        - author_id
        - book_id
        - audio_url
    Author:
      type: object
      properties:
        _id:
          type: string
          example: 507f1f77bcf86cd799439011
        fullneme:
          type: string
          example: Alisher Navoi
        bith_date:
          type: number
          example: 1441
        death_date:
          type: string
          example: "1501"
        periot:
          type: string
          enum: ["Temuriylar davri", "Jadid adabiyoti", "Savet davri", "Mustaqillik davri"]
          example: Temuriylar davri
        img:
          type: string
          example: image_1697654321000.jpg
        bio:
          type: string
          example: A prominent Uzbek poet and statesman.
        creativite:
          type: string
          example: Poetry, prose, and historical writings
        region:
          type: string
          example: Herat
        books:
          type: array
          items:
            type: string
            example: 507f1f77bcf86cd799439012
      required:
        - fullneme
        - bith_date
        - death_date
        - periot
        - img
        - bio
        - creativite
        - region
        - books
    Book:
      type: object
      properties:
        _id:
          type: string
          example: 507f1f77bcf86cd799439011
        title:
          type: string
          example: Xamsa
        periot:
          type: string
          enum: ["Temuriylar davri", "Jadid adabiyoti", "Savet davri", "Mustaqillik davri"]
          example: Temuriylar davri
        img:
          type: string
          example: image_1697654321000.jpg
        desc:
          type: string
          example: A collection of five epic poems.
        page:
          type: number
          example: 300
        published_year:
          type: string
          example: "1483"
        ganre:
          type: string
          example: Poetry
        published_home:
          type: string
          example: Herat Publishing
        author_info:
          type: string
          example: 507f1f77bcf86cd799439012
        Citaions:
          type: string
          example: 507f1f77bcf86cd799439013
      required:
        - title
        - periot
        - img
        - desc
        - page
        - published_year
        - ganre
        - published_home
        - author_info
        - Citaions
    Citation:
      type: object
      properties:
        _id:
          type: string
          example: 507f1f77bcf86cd799439011
        book_id:
          type: string
          example: 507f1f77bcf86cd799439012
        desc:
          type: string
          example: A notable quote from the book.
      required:
        - book_id
        - desc
    EBook:
      type: object
      properties:
        _id:
          type: string
          example: 507f1f77bcf86cd799439011
        author_id:
          type: string
          example: 507f1f77bcf86cd799439012
        book_id:
          type: string
          example: 507f1f77bcf86cd799439013
        ebook_url:
          type: string
          example: ebook_1697654321000.pdf
      required:
        - author_id
        - book_id
        - ebook_url
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: AccessToken
    cookieAuthRefresh:
      type: apiKey
      in: cookie
      name: RefreshToken
security:
  - cookieAuth: []